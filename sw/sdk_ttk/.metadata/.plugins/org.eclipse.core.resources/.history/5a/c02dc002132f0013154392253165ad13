#include <stdio.h>
#include "platform.h"
#include "xbasic_types.h"
#include "xiomodule.h"

volatile int debug = 0;
volatile double fin = 100.00;
volatile int series_index = 0;
volatile int err_observ = 1;
volatile int ms = 0;
volatile int m_ms = 0;
volatile int second = 0;

volatile int count_errors = 0;
volatile int count_errors_all = 0;

// uart/gpio variables
u32 uGpi1, uGpi2, uGpi3, uGpi4, uGpo1;
u32 uDevId = XPAR_IOMODULE_0_DEVICE_ID;

enum states {
	wait = 0,
	run = 1,
	error = 2,
	init = 3,
	setFrequency = 4,
	end = 5,
	printStatus = 6,
	countSecond = 7,
	measureFrequency = 8,
	deactivateCounter = 9
};
enum states state = init;


volatile int m_values[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};//{38, 61, 51, 64, 41, 54, 31, 57, 47, 21, 50, 58, 37, 53};
volatile int d_values[] = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,};//{5, 6, 4, 5, 8, 7, 3, 11, 6, 4, 19, 11, 7, 5};
volatile int o_values[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};//{3, 4, 5, 5, 2, 3, 4, 2, 3, 2, 1, 2, 2, 4};

// PHASEMUX [15:13] RESERVED [12] HIGH [11:6] LOW [5:0]
volatile unsigned short * pMMCMo1 = (volatile unsigned short *)(0xC0000000 + (0x08<<2));
// RESERVED [15:10] MX [9:8] EDGE [7] NO COUNT [6] DELAY TIME [5:0]
volatile unsigned short * pMMCMo2 = (volatile unsigned short *)(0xC0000000 + (0x09<<2));
// PHASEMUX [15:13] RESERVED [12] HIGH [11:6] LOW [5:0]
volatile unsigned short * pMMCMm1 = (volatile unsigned short *)(0xC0000000 + (0x14<<2));
// RESERVED [15:10] MX [9:8] EDGE [7] NO COUNT [6] DELAY TIME [5:0]
volatile unsigned short * pMMCMm2 = (volatile unsigned short *)(0xC0000000 + (0x15<<2));
// RESERVED [15:14] EDGE [13] NO COUNT [12] HIGH [11:6] LOW [5:0]
volatile unsigned short * pMMCMd1 = (volatile unsigned short *)(0xC0000000 + (0x16<<2));
//volatile unsigned short * pMMCMd2 = (volatile unsigned short *)(0xC0000000 + (0x17<<2));

XIOModule iomdle;

void countError();
void resetTestcircuit();
void resetCounter();
void cleanUp();
void initSystem();
void initFrequency();
void increaseFrequency();
int setMultiplier(int m);
int setDividerOutput1(int o);
int setDivider(int d);
double calcFreq(int m, int d, int o);
void print(char *str);


// FIT1 Interrupt Service Routine
void oneSecondInterruptRoutine( void* ip) {
	second++;
	if(second % 5 == 0) {
		state = deactivateCounter;
	} else {
		state = printStatus;
	}
	xil_printf("%d; %d; %d; %d; %d; %d; %d; %d; %d;\n\r", second, count_errors, count_errors_all, series_index, m_values[series_index], d_values[series_index], o_values[series_index], 100*m_values[series_index]/(d_values[series_index]*o_values[series_index]), 10000000000/m_ms);
	count_errors = 0;
}

// FIT2 Interrupt Service Routine
void oneMillisecondInterruptRoutine( void* ip ) {
	ms++;
}

void testInterruptRoutine1( void* ip ) {
	//print("MMCM RESET\n\r");
}
void testInterruptRoutine2( void* ip ) {
	//print("TC RESET\n\r");
}


// OWN IMPLEMENTATION COUNTER
void errorObservationInterruptRoutine( void* ip) {
	if(err_observ == 1) {
		count_errors++;
		count_errors_all++;
		state = error;
	}
}

void measureFrequencyInterruptRoutine( void* ip) {
	m_ms = ms;
	state = measureFrequency;
}

int main() {

	u32 data = XIOModule_Initialize(&iomdle, XPAR_IOMODULE_0_DEVICE_ID);
	data = XIOModule_Start(&iomdle);
	u8 rx_buf[10];

    while(1) {

    	switch(state) {
    		case init:
    			initSystem();
    			initFrequency();
    			resetCounter();
    			state = run;
    			break;
    		case run:
//				while (( data = XIOModule_Recv(&iomdle, rx_buf, 1)) == 0 );
//				switch(rx_buf[0]) {
//					case 110:
//						state = setFrequency;
//						break;
//					case 112:
//						if(err_observ == 1) {
//							err_observ = 0;
//							print("Error Observation off\n\r");
//						} else {
//							err_observ = 1;
//							print("Error Observation on\n\r");
//						}
//						break;
//					case 114:
//						XIOModule_DiscreteWrite(&iomdle, 1, 3);
//						print("1->Design resetted\n\r");
//						break;
//					case 116:
//						XIOModule_DiscreteWrite(&iomdle, 1, 0);
//						print("0->Design resetted\n\r");
//						break;
//					default:
//
//						break;
//				}
    			break;
    		case error:
    			state = run;
    			break;
    		case printStatus:
    			state = run;
    			break;
    		case measureFrequency:
    			resetCounter();
    			ms = 0;
    			state = run;
    			break;
    		case setFrequency:
    			increaseFrequency();
    			state = run;
    			break;
    		case deactivateCounter:
    			XIOModule_Disable(&iomdle, 31);
    			break;
    		case end:
    			cleanUp();
    			return 0;
    			break;
    		default:
    			state = run;
    			break;
		}

    }

    return 0;
}

// User Functions
void countError() {
	count_errors++;
	count_errors_all++;
}

void resetTestcircuit() {
	XIOModule_DiscreteWrite(&iomdle, 1, 2);
	XIOModule_DiscreteWrite(&iomdle, 1, 0);
}

void resetCounter() {
	XIOModule_DiscreteWrite(&iomdle, 1, 4);
	XIOModule_DiscreteWrite(&iomdle, 1, 0);
}

void cleanUp() {
	 cleanup_platform();
}

void initSystem() {
	init_platform();
	print("Initialization\n\r");

	XIOModule_Initialize(&iomdle, uDevId);
	XIOModule_Start(&iomdle);

	// Initialize GP INPUTs
	uGpi1 = XIOModule_DiscreteRead(&iomdle, 1);
	uGpi2 = XIOModule_DiscreteRead(&iomdle, 2);
	uGpi3 = XIOModule_DiscreteRead(&iomdle, 3);
	uGpi4 = XIOModule_DiscreteRead(&iomdle, 4);

	XIOModule_DiscreteWrite(&iomdle, 1, 0);

	// Connect ISRs
	XIOModule_Connect(&iomdle, 7, oneSecondInterruptRoutine, NULL);
	XIOModule_Enable(&iomdle, 7);

	XIOModule_Connect(&iomdle, 8, oneMillisecondInterruptRoutine, NULL);
	XIOModule_Enable(&iomdle, 8);

//	XIOModule_Connect(&iomdle, 28, testInterruptRoutine1, NULL);
//	XIOModule_Enable(&iomdle, 28);
//
//	XIOModule_Connect(&iomdle, 29, testInterruptRoutine2, NULL);
//	XIOModule_Enable(&iomdle, 29);
//
//	XIOModule_Connect(&iomdle, 30, errorObservationInterruptRoutine, NULL);
//	XIOModule_Enable(&iomdle, 30);

	XIOModule_Connect(&iomdle, 31, measureFrequencyInterruptRoutine, NULL);
	XIOModule_Enable(&iomdle, 31);

	microblaze_register_handler(XIOModule_DeviceInterruptHandler, uDevId );
	microblaze_enable_interrupts();
}

void initFrequency() {
	// Set initial MMCM parameters
	XIOModule_DiscreteWrite(&iomdle, 1, 2);

	setMultiplier(m_values[series_index]);
	setDivider(d_values[series_index]);
	setDividerOutput1(o_values[series_index]);

	XIOModule_DiscreteWrite(&iomdle, 1, 0);
}

void increaseFrequency() {
	series_index++;
	if(series_index >= sizeof(m_values) / 4) {
		series_index = 0;
	}

	XIOModule_DiscreteWrite(&iomdle, 1, 2);

	setMultiplier(m_values[series_index]);
	setDivider(d_values[series_index]);
	setDividerOutput1(o_values[series_index]);

	XIOModule_DiscreteWrite(&iomdle, 1, 0);

	second = 0;
}

void setValue(int high, int low, short *mptr) {
	*mptr = (1 << 12) + (high << 6) + low;
}

int setDivider(int m) {
	// RESERVED [15:14] EDGE [13] NO COUNT [12] HIGH [11:6] LOW [5:0]

	microblaze_disable_interrupts();

	unsigned short tempM1 = *pMMCMd1;
	unsigned short MASK;

	int ret = 0;

	if(m == 1) {
		//*pMMCMm2 = (1 << 6);
		MASK = 0xEFFF;
		tempM1 &= MASK;
		tempM1 |= (1<<12);
		*pMMCMd1 = tempM1;
		ret = 1;
	}
	if(m % 2 == 0) {

		MASK = 0xC000;
		tempM1 &= MASK;
		tempM1 |= ((m/2) <<6) + (m/2) + (0<<13) + (0<<12);
		*pMMCMd1 = tempM1;
		ret = 2;
	}
	if(m % 2 == 1 && m != 1) {
		MASK = 0xC000;
		tempM1 &= MASK;
		tempM1 |= ((m/2) <<6) + (m/2)+1 + (1<<13) + (0<<12);
		*pMMCMd1 = tempM1;
		ret = 3;
	}
	mbar(1);
	mbar(2);

	xil_printf("[d, (r1-%d)], ", tempM1);

	microblaze_enable_interrupts();
	return ret;
}

int setMultiplier(int m) {
	microblaze_disable_interrupts();

	// PHASEMUX [15:13] RESERVED [12] HIGH [11:6] LOW [5:0]
	// RESERVED [15:10] MX [9:8] EDGE [7] NO COUNT [6] DELAY TIME [5:0]

	unsigned short tempM1 = *pMMCMm1;
	unsigned short tempM2 = *pMMCMm2;
	unsigned short MASK;

	int ret = 0;

	if(m == 1) {
		MASK = 0xF000;
		tempM1 &= MASK;
		*pMMCMm1 = tempM1;

		mbar(1);
		mbar(2);

		MASK = 0xFF3F;
		tempM2 &= MASK;
		tempM2 |= (0<<7) + (1<<6);
		*pMMCMm2 = tempM2;
		ret = 1;
	}
	if(m % 2 == 0) {
		MASK = 0xF000;
		tempM1 &= MASK;
		tempM1 |= ((m/2) <<6) + (m/2);
		*pMMCMm1 = tempM1;

		mbar(1);
		mbar(2);

		MASK = 0xFF3F;
		tempM2 &= MASK;
		tempM2 |= (0<<6) + (0<<7);
		*pMMCMm2 = tempM2;
		ret = 2;
	}
	if(m % 2 == 1 && m != 1) {
		MASK = 0xF000;
		tempM1 &= MASK;
		tempM1 |= ((m/2) <<6) + (m/2)+1;
		*pMMCMm1 = tempM1;

		mbar(1);
		mbar(2);

		MASK = 0xFF3F;
		tempM2 &= MASK;
		tempM2 |= (0<<6) + (1<<7);
		*pMMCMm2 = tempM2;
		ret = 3;
	}
	mbar(1);
	mbar(2);

	xil_printf("[m, (r1-%d r2-%d)], ", tempM1, tempM2);

	microblaze_enable_interrupts();
	return ret;
}

int setDividerOutput1(int m) {
	microblaze_disable_interrupts();

	// PHASEMUX [15:13] RESERVED [12] HIGH [11:6] LOW [5:0]
	// RESERVED [15:10] MX [9:8] EDGE [7] NO COUNT [6] DELAY TIME [5:0]

	unsigned short tempM1 = *pMMCMo1;
	unsigned short tempM2 = *pMMCMo2;
	unsigned short MASK;

	int ret = 0;

	if(m == 1) {
		MASK = 0xF000;
		tempM1 &= MASK;
		*pMMCMo1 = tempM1;

		mbar(1);
		mbar(2);

		MASK = 0xFF3F;
		tempM2 &= MASK;
		tempM2 |= (0<<7) + (1<<6);
		*pMMCMo2 = tempM2;
		ret = 1;
	}
	if(m % 2 == 0) {

		MASK = 0xF000;
		tempM1 &= MASK;
		tempM1 |= ((m/2) <<6) + (m/2);
		*pMMCMo1 = tempM1;

		mbar(1);
		mbar(2);

		MASK = 0xFF3F;
		tempM2 &= MASK;
		tempM2 |= (0<<6) + (0<<7);
		*pMMCMo2 = tempM2;
		ret = 2;
	}
	if(m % 2 == 1 && m != 1) {
		MASK = 0xF000;
		tempM1 &= MASK;
		tempM1 |= ((m/2) <<6) + (m/2)+1;
		*pMMCMo1 = tempM1;

		mbar(1);
		mbar(2);

		MASK = 0xFF3F;
		tempM2 &= MASK;
		tempM2 |= (0<<6) + (1<<7);
		*pMMCMo2 = tempM2;
		ret = 3;
	}
	mbar(1);
	mbar(2);

	xil_printf("[o, (r1-%d r2-%d)]\n\r", tempM1, tempM2);

	microblaze_enable_interrupts();
	return ret;
}

double calcFreq(int m, int d, int o) {
	double nenner = d*o;
	return (double)(100 * m) / ((double)nenner);
}

#include <stdio.h>
#include "platform.h"
#include "xbasic_types.h"
#include "xiomodule.h"

volatile int debug = 0;

volatile int second = 0;
volatile int minute = 0;
volatile int hour = 0;
volatile int day = 0;
volatile int sem = 0;

// PHASEMUX [15:13] RESERVED [12] HIGH [11:6] LOW [5:0]
volatile unsigned short * pMMCMo1 = (volatile unsigned short *)(0xC0000000 + (0x08<<2));
// RESERVED [15:10] MX [9:8] EDGE [7] NO COUNT [6] DELAY TIME [5:0]
volatile unsigned short * pMMCMo2 = (volatile unsigned short *)(0xC0000000 + (0x09<<2));
// PHASEMUX [15:13] RESERVED [12] HIGH [11:6] LOW [5:0]
volatile unsigned short * pMMCMm1 = (volatile unsigned short *)(0xC0000000 + (0x14<<2));
// RESERVED [15:10] MX [9:8] EDGE [7] NO COUNT [6] DELAY TIME [5:0]
volatile unsigned short * pMMCMm2 = (volatile unsigned short *)(0xC0000000 + (0x15<<2));
// RESERVED [15:14] EDGE [13] NO COUNT [12] HIGH [11:6] LOW [5:0]
volatile unsigned short * pMMCMd1 = (volatile unsigned short *)(0xC0000000 + (0x16<<2));
//volatile unsigned short * pMMCMd2 = (volatile unsigned short *)(0xC0000000 + (0x17<<2));

XIOModule iomdle;

int setMultiplier(int m);
int setDividerOutput1(int o);
int setDivider(int d);
void print(char *str);
//void myISR( void ) __attribute__ ((fast_interrupt));

//void myISR7( void* ip) __attribute__ ((fast_interrupt));
//void myISR16( void* ip) __attribute__ ((fast_interrupt));
//void myISR17( void* ip) __attribute__ ((fast_interrupt));
//void myISR31( void) __attribute__ ((fast_interrupt));



// FIT1 Interrupt Service Routine
void myISR7( void* ip) {
    //sem = 1;
    //second++;
	//print("ISR 7\n\r");
}

// DRP DREADY SIGNAL
void myISR16( void* ip) {
	print("drdy\n\r");
}

// TEST CIRCUIT RESET
void myISR17( void* ip) {
    print("reset gesetzt\n\r");
}

// OWN IMPLEMENTATION COUNTER
void myISR31( void* ip) {
	sem = 1;
	second++;
}

int main() {

    init_platform();
    print("BASIC DESIGN #1\n\r");

    u32 uGpi1, uGpi2, uGpi3, uGpi4, uGpo1;
    u32 uDevId = XPAR_IOMODULE_0_DEVICE_ID;

    //external interrupt
    u8  uIntrId = 16;//XPAR_IOMODULE_0_SYSTEM_INTC_INTERRUPT_0_INTR;


    XIOModule_Initialize(&iomdle, uDevId);
    XIOModule_Start(&iomdle);

    uGpi1 = XIOModule_DiscreteRead(&iomdle, 1);
	uGpi2 = XIOModule_DiscreteRead(&iomdle, 2);
	uGpi3 = XIOModule_DiscreteRead(&iomdle, 3);
	uGpi4 = XIOModule_DiscreteRead(&iomdle, 4);



    //print("CONNECTING INTERRUPT HANDLERS [1..32].. ");

	XIOModule_Connect(&iomdle, 7, myISR7, NULL);
	XIOModule_Enable(&iomdle, 7);

	XIOModule_Connect(&iomdle, 16, myISR16, NULL);
	XIOModule_Enable(&iomdle, 16);

	XIOModule_Connect(&iomdle, 17, myISR17, NULL);
	XIOModule_Enable(&iomdle, 17);

	XIOModule_Connect(&iomdle, 31, myISR31, NULL);
	XIOModule_Enable(&iomdle, 31);

	// VERSCHIEBUNG
    microblaze_register_handler(XIOModule_DeviceInterruptHandler, uDevId );

    microblaze_enable_interrupts();

    print("loop\n\r");


    int i = 1;

    XIOModule_DiscreteWrite(&iomdle, 1, 1);
    setMultiplier(i);
    XIOModule_DiscreteWrite(&iomdle, 1, 0);

    while(1) {
    	if(sem == 1) {
    		sem = 0;
    		if(second % 20 == 0) {
    			i++;
				if(i == 7) {
					i = 1;
				}
    			XIOModule_DiscreteWrite(&iomdle, 1, 1);
    			setMultiplier(i);
    			XIOModule_DiscreteWrite(&iomdle, 1, 0);
    		}
    		xil_printf("(%d): %d\n\r", i, second);
    	}
    }


    cleanup_platform();

    return 0;
}


void setValue(int high, int low, short *mptr) {
	*mptr = (1 << 12) + (high << 6) + low;
}

int setDivider(int d) {
	// RESERVED [15:14] EDGE [13] NO COUNT [12] HIGH [11:6] LOW [5:0]
	if(d <= 0) return 1;
	if(d == 1) {
		*pMMCMd1 = 1<<11;
		return 2;
	}
	if(d % 2 == 0) {
		*pMMCMd1 = ((d/2) << 6) + (d/2);
		return 3;
	}
	if(d % 2 == 1) {
		*pMMCMd1 = ((d/2) << 6) + ((d/2)+1) + (1 << 12);
		return 4;
	}
	return 0;
}

int setMultiplier(int m) {
	// PHASEMUX [15:13] RESERVED [12] HIGH [11:6] LOW [5:0]
	// RESERVED [15:10] MX [9:8] EDGE [7] NO COUNT [6] DELAY TIME [5:0]

	unsigned short tempM1 = *pMMCMm1;
	unsigned short tempM2 = *pMMCMm2;
	unsigned short MASK;

	int ret = 0;

	if(m == 1) {
		//*pMMCMm2 = (1 << 6);
		MASK = 0xFF3F;
		tempM2 &= MASK;
		tempM2 |= (1<<6) + (0<<7);
		*pMMCMm2 = tempM2;
		ret = 1;
	}
	if(m % 2 == 0) {
		//*pMMCMm1 = ((m/2) <<6) + (m/2);
		//pMMCMm2 = 0 << 6;

		MASK = 0xF000;
		tempM1 &= MASK;
		tempM1 |= ((m/2) <<6) + (m/2);
		*pMMCMm1 = tempM1;

		MASK = 0xFF3F;
		//1111111100111111
		tempM2 &= MASK;
		tempM2 |= (0<<6) + (0<<7);
		*pMMCMm2 = tempM2;
		ret = 2;
	}
	if(m % 2 == 1) {
		*pMMCMm1 = ((m/2) <<6) + ((m/2) + 1);
		*pMMCMm2 = (1 << 7);

		MASK = 0xF000;
		tempM1 &= MASK;
		tempM1 |= ((m/2) <<6) + (m/2)+1;
		*pMMCMm1 = tempM1;

		MASK = 0xFF3F;
		tempM2 &= MASK;
		tempM2 |= (0<<6) + (1<<7);
		*pMMCMm2 = tempM2;
		ret = 3;
	}
	mbar(1);
	mbar(2);
	return ret;
}

int setDividerOutput1(int o) {
	// PHASEMUX [15:13] RESERVED [12] HIGH [11:6] LOW [5:0]
	// RESERVED [15:10] MX [9:8] EDGE [7] NO COUNT [6] DELAY TIME [5:0]

	if(o == 1) {
		*pMMCMo2 = (1 << 6);
		return 1;
	}
	if(o % 2 == 0) {
		*pMMCMo1 = ((o/2) <<6) + (o/2);
		return 2;
	}
	if(o % 2 == 1) {
		*pMMCMo1 = ((o/2) << 6) + ((o/2) + 1);
		*pMMCMo2 = (1 << 7);
		return 3;
	}
	return 0;
}
